"use client"

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Shield, 
  AlertTriangle, 
  Search, 
  Filter, 
  CheckCircle, 
  XCircle, 
  Clock, 
  ExternalLink,
  User,
  Calendar,
  ArrowUpDown,
  BarChart,
  Download,
  Zap
} from 'lucide-react'
import { useDashboard, useVulnerabilities } from '@/hooks/use-dashboard'
import { VulnerabilityTrackerProps, VulnerabilityData } from '@/types/dashboard'
import { cn, formatRelativeTime } from '@/lib/utils'

export function VulnerabilityTracker({ 
  className, 
  showResolved = false,
  onVulnerabilityUpdate 
}: VulnerabilityTrackerProps) {
  const [selectedTab, setSelectedTab] = useState('open')
  const [searchTerm, setSearchTerm] = useState('')
  const [filterSeverity, setFilterSeverity] = useState('all')
  const [filterStatus, setFilterStatus] = useState('all')
  const [sortField, setSortField] = useState('severity')
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc')

  const {
    fetchVulnerabilities,
    updateVulnerabilityStatus,
    assignVulnerability,
    loading
  } = useDashboard()

  const vulnerabilities = useVulnerabilities()

  useEffect(() => {
    fetchVulnerabilities()
  }, [fetchVulnerabilities])

  const handleStatusChange = async (id: string, status: string) => {
    try {
      await updateVulnerabilityStatus(id, status)
      onVulnerabilityUpdate?.(vulnerabilities.find(v => v.id === id)!)
    } catch (error) {
      console.error('Failed to update vulnerability status:', error)
    }
  }

  const handleAssign = async (id: string, assignee: string) => {
    try {
      await assignVulnerability(id, assignee)
    } catch (error) {
      console.error('Failed to assign vulnerability:', error)
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <AlertTriangle className="w-4 h-4 text-severity-critical" />
      case 'high':
        return <AlertTriangle className="w-4 h-4 text-severity-high" />
      case 'medium':
        return <AlertTriangle className="w-4 h-4 text-severity-medium" />
      case 'low':
        return <AlertTriangle className="w-4 h-4 text-severity-low" />
      default:
        return <AlertTriangle className="w-4 h-4 text-severity-info" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'severity-critical'
      case 'high': return 'severity-high'
      case 'medium': return 'severity-medium'
      case 'low': return 'severity-low'
      default: return 'severity-info'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'resolved':
        return <CheckCircle className="w-4 h-4 text-status-online" />
      case 'in-progress':
        return <Clock className="w-4 h-4 text-status-scanning" />
      case 'false-positive':
        return <XCircle className="w-4 h-4 text-muted-foreground" />
      case 'accepted-risk':
        return <Shield className="w-4 h-4 text-status-warning" />
      default:
        return <AlertTriangle className="w-4 h-4 text-status-offline" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'resolved': return 'status-online'
      case 'in-progress': return 'status-scanning'
      case 'false-positive': return 'text-muted-foreground'
      case 'accepted-risk': return 'status-warning'
      default: return 'status-offline'
    }
  }

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = 
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (vuln.cveId && vuln.cveId.toLowerCase().includes(searchTerm.toLowerCase()))
    
    const matchesSeverity = filterSeverity === 'all' || vuln.severity === filterSeverity
    const matchesStatus = filterStatus === 'all' || vuln.status === filterStatus
    
    return matchesSearch && matchesSeverity && matchesStatus
  })

  const sortedVulnerabilities = [...filteredVulnerabilities].sort((a, b) => {
    const getSeverityValue = (severity: string) => {
      switch (severity) {
        case 'critical': return 4
        case 'high': return 3
        case 'medium': return 2
        case 'low': return 1
        default: return 0
      }
    }

    if (sortField === 'severity') {
      const aValue = getSeverityValue(a.severity)
      const bValue = getSeverityValue(b.severity)
      return sortDirection === 'desc' ? bValue - aValue : aValue - bValue
    }
    
    if (sortField === 'date') {
      const aValue = new Date(a.discoveryDate).getTime()
      const bValue = new Date(b.discoveryDate).getTime()
      return sortDirection === 'desc' ? bValue - aValue : aValue - bValue
    }
    
    if (sortField === 'cvss') {
      const aValue = a.cvssScore || 0
      const bValue = b.cvssScore || 0
      return sortDirection === 'desc' ? bValue - aValue : aValue - bValue
    }
    
    return 0
  })

  const openVulnerabilities = sortedVulnerabilities.filter(v => 
    v.status === 'open' || v.status === 'in-progress'
  )
  
  const resolvedVulnerabilities = sortedVulnerabilities.filter(v => 
    v.status === 'resolved' || v.status === 'false-positive' || v.status === 'accepted-risk'
  )

  const criticalCount = vulnerabilities.filter(v => v.severity === 'critical' && v.status === 'open').length
  const highCount = vulnerabilities.filter(v => v.severity === 'high' && v.status === 'open').length
  const mediumCount = vulnerabilities.filter(v => v.severity === 'medium' && v.status === 'open').length
  const lowCount = vulnerabilities.filter(v => v.severity === 'low' && v.status === 'open').length

  const toggleSort = (field: string) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortDirection('desc')
    }
  }

  return (
    <div className={cn("space-y-6", className)}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-foreground">Vulnerability Tracker</h2>
          <p className="text-muted-foreground">
            Manage and remediate security vulnerabilities
          </p>
        </div>
        
        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm">
            <BarChart className="w-4 h-4 mr-2" />
            Reports
          </Button>
          <Button variant="outline" size="sm">
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-gradient-to-br from-severity-critical/10 to-severity-critical/5 border-severity-critical/20">
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-severity-critical">Critical</p>
                <h3 className="text-2xl font-bold">{criticalCount}</h3>
              </div>
              <AlertTriangle className="w-8 h-8 text-severity-critical opacity-80" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-severity-high/10 to-severity-high/5 border-severity-high/20">
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-severity-high">High</p>
                <h3 className="text-2xl font-bold">{highCount}</h3>
              </div>
              <AlertTriangle className="w-8 h-8 text-severity-high opacity-80" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-severity-medium/10 to-severity-medium/5 border-severity-medium/20">
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-severity-medium">Medium</p>
                <h3 className="text-2xl font-bold">{mediumCount}</h3>
              </div>
              <AlertTriangle className="w-8 h-8 text-severity-medium opacity-80" />
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-severity-low/10 to-severity-low/5 border-severity-low/20">
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-severity-low">Low</p>
                <h3 className="text-2xl font-bold">{lowCount}</h3>
              </div>
              <AlertTriangle className="w-8 h-8 text-severity-low opacity-80" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                <Input
                  placeholder="Search vulnerabilities by title, description, or CVE..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            
            <Select value={filterSeverity} onValueChange={setFilterSeverity}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
                <SelectItem value="info">Info</SelectItem>
              </SelectContent>
            </Select>

            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="open">Open</SelectItem>
                <SelectItem value="in-progress">In Progress</SelectItem>
                <SelectItem value="resolved">Resolved</SelectItem>
                <SelectItem value="false-positive">False Positive</SelectItem>
                <SelectItem value="accepted-risk">Accepted Risk</SelectItem>
              </SelectContent>
            </Select>

            <Button variant="outline" size="icon">
              <Filter className="w-4 h-4" />
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Vulnerability Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="open">
            Open ({openVulnerabilities.length})
          </TabsTrigger>
          <TabsTrigger value="resolved">
            Resolved ({resolvedVulnerabilities.length})
          </TabsTrigger>
        </TabsList>

        {/* Table Header */}
        <div className="grid grid-cols-12 gap-4 py-3 px-4 text-xs font-medium text-muted-foreground border-b">
          <div className="col-span-5 flex items-center gap-1 cursor-pointer" onClick={() => toggleSort('title')}>
            Vulnerability
            {sortField === 'title' && (
              <ArrowUpDown className="w-3 h-3" />
            )}
          </div>
          <div className="col-span-1 flex items-center gap-1 cursor-pointer" onClick={() => toggleSort('severity')}>
            Severity
            {sortField === 'severity' && (
              <ArrowUpDown className="w-3 h-3" />
            )}
          </div>
          <div className="col-span-2 flex items-center gap-1 cursor-pointer" onClick={() => toggleSort('cvss')}>
            CVSS
            {sortField === 'cvss' && (
              <ArrowUpDown className="w-3 h-3" />
            )}
          </div>
          <div className="col-span-2 flex items-center gap-1 cursor-pointer" onClick={() => toggleSort('date')}>
            Discovered
            {sortField === 'date' && (
              <ArrowUpDown className="w-3 h-3" />
            )}
          </div>
          <div className="col-span-2">
            Status
          </div>
        </div>

        <TabsContent value="open" className="space-y-4 mt-0">
          {openVulnerabilities.length === 0 ? (
            <Card>
              <CardContent className="pt-6">
                <div className="text-center text-muted-foreground">
                  <CheckCircle className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p>No open vulnerabilities</p>
                  <p className="text-sm">All vulnerabilities have been addressed</p>
                </div>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-2">
              {openVulnerabilities.map((vulnerability) => (
                <VulnerabilityRow
                  key={vulnerability.id}
                  vulnerability={vulnerability}
                  onStatusChange={handleStatusChange}
                  onAssign={handleAssign}
                />
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="resolved" className="space-y-4 mt-0">
          {resolvedVulnerabilities.length === 0 ? (
            <Card>
              <CardContent className="pt-6">
                <div className="text-center text-muted-foreground">
                  <AlertTriangle className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p>No resolved vulnerabilities</p>
                  <p className="text-sm">Start addressing vulnerabilities to see them here</p>
                </div>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-2">
              {resolvedVulnerabilities.map((vulnerability) => (
                <VulnerabilityRow
                  key={vulnerability.id}
                  vulnerability={vulnerability}
                  onStatusChange={handleStatusChange}
                  onAssign={handleAssign}
                />
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  )
}

interface VulnerabilityRowProps {
  vulnerability: VulnerabilityData
  onStatusChange: (id: string, status: string) => void
  onAssign: (id: string, assignee: string) => void
}

function VulnerabilityRow({ 
  vulnerability, 
  onStatusChange, 
  onAssign 
}: VulnerabilityRowProps) {
  const [expanded, setExpanded] = useState(false)

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <AlertTriangle className="w-4 h-4 text-severity-critical" />
      case 'high':
        return <AlertTriangle className="w-4 h-4 text-severity-high" />
      case 'medium':
        return <AlertTriangle className="w-4 h-4 text-severity-medium" />
      case 'low':
        return <AlertTriangle className="w-4 h-4 text-severity-low" />
      default:
        return <AlertTriangle className="w-4 h-4 text-severity-info" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'severity-critical'
      case 'high': return 'severity-high'
      case 'medium': return 'severity-medium'
      case 'low': return 'severity-low'
      default: return 'severity-info'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'resolved':
        return <CheckCircle className="w-4 h-4 text-status-online" />
      case 'in-progress':
        return <Clock className="w-4 h-4 text-status-scanning" />
      case 'false-positive':
        return <XCircle className="w-4 h-4 text-muted-foreground" />
      case 'accepted-risk':
        return <Shield className="w-4 h-4 text-status-warning" />
      default:
        return <AlertTriangle className="w-4 h-4 text-status-offline" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'resolved': return 'status-online'
      case 'in-progress': return 'status-scanning'
      case 'false-positive': return 'text-muted-foreground'
      case 'accepted-risk': return 'status-warning'
      default: return 'status-offline'
    }
  }

  return (
    <Card className={cn(
      "hover:bg-muted/50 transition-colors overflow-hidden",
      expanded && "ring-1 ring-cyber-500/20"
    )}>
      <div 
        className="grid grid-cols-12 gap-4 p-4 cursor-pointer"
        onClick={() => setExpanded(!expanded)}
      >
        <div className="col-span-5 flex items-center gap-3">
          {getSeverityIcon(vulnerability.severity)}
          <div className="min-w-0">
            <h3 className="font-medium text-sm truncate">
              {vulnerability.title}
            </h3>
            <div className="text-xs text-muted-foreground flex items-center gap-2">
              {vulnerability.cveId && (
                <span className="font-mono">{vulnerability.cveId}</span>
              )}
              <span>{vulnerability.affectedSystems.length} affected systems</span>
            </div>
          </div>
        </div>
        
        <div className="col-span-1">
          <Badge className={`${getSeverityColor(vulnerability.severity)}`}>
            {vulnerability.severity}
          </Badge>
        </div>
        
        <div className="col-span-2">
          {vulnerability.cvssScore ? (
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold border-2 border-current text-foreground">
                {vulnerability.cvssScore.toFixed(1)}
              </div>
              <div className="text-xs">
                <div className="font-medium">CVSS</div>
                <div className="text-muted-foreground">v3.1</div>
              </div>
            </div>
          ) : (
            <span className="text-xs text-muted-foreground">N/A</span>
          )}
        </div>
        
        <div className="col-span-2 text-xs text-muted-foreground">
          <div className="flex items-center gap-1">
            <Calendar className="w-3 h-3" />
            {formatRelativeTime(vulnerability.discoveryDate)}
          </div>
        </div>
        
        <div className="col-span-2 flex items-center justify-between">
          <Badge className={`${getStatusColor(vulnerability.status)}`}>
            {vulnerability.status.replace('-', ' ')}
          </Badge>
          
          <Button variant="ghost" size="sm" onClick={(e) => {
            e.stopPropagation()
            setExpanded(!expanded)
          }}>
            {expanded ? (
              <XCircle className="w-4 h-4" />
            ) : (
              <Zap className="w-4 h-4" />
            )}
          </Button>
        </div>
      </div>

      {/* Expanded Details */}
      {expanded && (
        <div className="px-4 pb-4 pt-0 border-t">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="space-y-4">
              <div>
                <h4 className="text-sm font-medium mb-2">Description</h4>
                <p className="text-sm text-muted-foreground">
                  {vulnerability.description}
                </p>
              </div>
              
              <div>
                <h4 className="text-sm font-medium mb-2">Affected Systems</h4>
                <div className="space-y-1">
                  {vulnerability.affectedSystems.map((system, index) => (
                    <div key={index} className="text-xs font-mono bg-muted p-1 rounded">
                      {system}
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <div>
                <h4 className="text-sm font-medium mb-2">Remediation</h4>
                {vulnerability.remediation ? (
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-xs">
                      <Badge variant="outline">
                        Priority: {vulnerability.remediation.priority}
                      </Badge>
                      <Badge variant="outline">
                        Effort: {vulnerability.remediation.effort}
                      </Badge>
                      <Badge variant="outline">
                        Est. Time: {vulnerability.remediation.estimatedTime}h
                      </Badge>
                    </div>
                    <ul className="text-sm text-muted-foreground space-y-1 list-disc pl-4">
                      {vulnerability.remediation.steps.map((step, index) => (
                        <li key={index}>{step}</li>
                      ))}
                    </ul>
                  </div>
                ) : (
                  <p className="text-sm text-muted-foreground">
                    No remediation steps available
                  </p>
                )}
              </div>
              
              <div className="flex items-center gap-2">
                <div className="text-xs">
                  <span className="text-muted-foreground mr-2">Exploit:</span>
                  <Badge variant={vulnerability.exploitAvailable ? "destructive" : "outline"}>
                    {vulnerability.exploitAvailable ? 'Available' : 'Not Available'}
                  </Badge>
                </div>
                
                <div className="text-xs">
                  <span className="text-muted-foreground mr-2">Patch:</span>
                  <Badge variant={vulnerability.patchAvailable ? "default" : "outline"}>
                    {vulnerability.patchAvailable ? 'Available' : 'Not Available'}
                  </Badge>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <div>
                <h4 className="text-sm font-medium mb-2">Actions</h4>
                <div className="space-y-2">
                  <Select 
                    defaultValue={vulnerability.status}
                    onValueChange={(value) => onStatusChange(vulnerability.id, value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Update Status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="open">Open</SelectItem>
                      <SelectItem value="in-progress">In Progress</SelectItem>
                      <SelectItem value="resolved">Resolved</SelectItem>
                      <SelectItem value="false-positive">False Positive</SelectItem>
                      <SelectItem value="accepted-risk">Accepted Risk</SelectItem>
                    </SelectContent>
                  </Select>
                  
                  <Select 
                    defaultValue="unassigned"
                    onValueChange={(value) => onAssign(vulnerability.id, value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Assign To" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="unassigned">Unassigned</SelectItem>
                      <SelectItem value="security-team">Security Team</SelectItem>
                      <SelectItem value="dev-team">Development Team</SelectItem>
                      <SelectItem value="ops-team">Operations Team</SelectItem>
                      <SelectItem value="john.doe">John Doe</SelectItem>
                      <SelectItem value="jane.smith">Jane Smith</SelectItem>
                    </SelectContent>
                  </Select>
                  
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" className="flex-1">
                      <ExternalLink className="w-4 h-4 mr-2" />
                      View Details
                    </Button>
                    
                    {vulnerability.cveId && (
                      <Button variant="outline" size="sm" className="flex-1">
                        <ExternalLink className="w-4 h-4 mr-2" />
                        View CVE
                      </Button>
                    )}
                  </div>
                </div>
              </div>
              
              <div>
                <h4 className="text-sm font-medium mb-2">Metadata</h4>
                <div className="text-xs text-muted-foreground space-y-1">
                  <div className="flex items-center gap-1">
                    <User className="w-3 h-3" />
                    <span>Reported by: Security Scanner</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Calendar className="w-3 h-3" />
                    <span>Discovered: {formatRelativeTime(vulnerability.discoveryDate)}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Shield className="w-3 h-3" />
                    <span>Status: {vulnerability.status.replace('-', ' ')}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </Card>
  )
}