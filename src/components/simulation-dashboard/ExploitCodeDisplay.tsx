import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Code, Copy, Check, Play, AlertTriangle, Terminal, FileCode, Download } from 'lucide-react';
import { useSimulationState } from '@/hooks/useSimulationState';
import { formatRelativeTime } from '@/lib/utils';
import { LlamaAnalystChat } from './LlamaAnalystChat';

interface ExploitCodeDisplayProps {
  className?: string;
}

export function ExploitCodeDisplay({ className }: ExploitCodeDisplayProps) {
  const { simulation, exploits } = useSimulationState();
  const [selectedExploit, setSelectedExploit] = useState<string | null>(null);
  const [copied, setCopied] = useState(false);
  const [activeTab, setActiveTab] = useState('code');

  // Set the first exploit as selected when exploits change
  useEffect(() => {
    if (exploits.length > 0 && !selectedExploit) {
      setSelectedExploit(exploits[0].id);
    }
  }, [exploits, selectedExploit]);

  // Get the currently selected exploit
  const currentExploit = exploits.find(e => e.id === selectedExploit);

  // Handle copy to clipboard
  const handleCopy = () => {
    if (currentExploit?.code) {
      navigator.clipboard.writeText(currentExploit.code);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  // Handle download
  const handleDownload = () => {
    if (currentExploit?.code) {
      const blob = new Blob([currentExploit.code], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${currentExploit.id}.py`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  };

  // Get vulnerability severity color
  const getSeverityColor = (type: string) => {
    if (type.includes('command_injection') || type.includes('rce')) {
      return 'severity-critical';
    } else if (type.includes('sql_injection') || type.includes('weak_password')) {
      return 'severity-high';
    } else if (type.includes('xss') || type.includes('path_traversal')) {
      return 'severity-medium';
    } else {
      return 'severity-low';
    }
  };

  return (
    <>
      <Card className={className}>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Code className="w-5 h-5 text-cyber-500" />
            Exploit Code Generator
          </CardTitle>
          <CardDescription>
            AI-generated exploit code for discovered vulnerabilities
          </CardDescription>
        </CardHeader>
        <CardContent>
          {exploits.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-64 bg-muted/20 rounded-md border">
              <Terminal className="w-12 h-12 text-muted-foreground mb-4" />
              <p className="text-muted-foreground">No exploits generated yet</p>
              <p className="text-xs text-muted-foreground mt-1">
                Exploits will appear here when vulnerabilities are discovered
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {/* Exploit List */}
              <div className="md:col-span-1 border rounded-md overflow-hidden">
                <div className="bg-muted p-2 border-b">
                  <h3 className="text-sm font-medium">Generated Exploits</h3>
                </div>
                <div className="max-h-96 overflow-y-auto p-1">
                  {exploits.map((exploit) => (
                    <div
                      key={exploit.id}
                      className={`p-2 rounded-md cursor-pointer hover:bg-muted/50 transition-colors ${
                        selectedExploit === exploit.id ? 'bg-muted' : ''
                      }`}
                      onClick={() => setSelectedExploit(exploit.id)}
                    >
                      <div className="flex items-center justify-between mb-1">
                        <div className="text-sm font-medium truncate">
                          {exploit.target.host}:{exploit.target.port}
                        </div>
                        <Badge className={`text-xs ${getSeverityColor(exploit.type)}`}>
                          {exploit.type.replace('_', ' ')}
                        </Badge>
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Generated {formatRelativeTime(new Date(exploit.generated_at))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Exploit Details */}
              <div className="md:col-span-2">
                {currentExploit ? (
                  <>
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <h3 className="text-sm font-medium">
                          Exploit for {currentExploit.target.host}:{currentExploit.target.port}
                        </h3>
                        <p className="text-xs text-muted-foreground">
                          {currentExploit.type.replace('_', ' ')} exploit in {currentExploit.language}
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button variant="outline" size="sm" onClick={handleCopy}>
                          {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                          <span className="ml-1">{copied ? 'Copied' : 'Copy'}</span>
                        </Button>
                        <Button variant="outline" size="sm" onClick={handleDownload}>
                          <Download className="w-4 h-4 mr-1" />
                          Download
                        </Button>
                      </div>
                    </div>

                    <Tabs value={activeTab} onValueChange={setActiveTab}>
                      <TabsList className="mb-2">
                        <TabsTrigger value="code">
                          <FileCode className="w-4 h-4 mr-1" />
                          Code
                        </TabsTrigger>
                        <TabsTrigger value="execution">
                          <Terminal className="w-4 h-4 mr-1" />
                          Execution
                        </TabsTrigger>
                      </TabsList>

                      <TabsContent value="code">
                        <div className="relative">
                          <div className="absolute top-2 right-2">
                            <Badge variant="outline" className="text-xs">
                              {currentExploit.language}
                            </Badge>
                          </div>
                          <pre className="p-4 bg-muted rounded-md overflow-x-auto text-xs font-mono h-80">
                            <code>{currentExploit.code}</code>
                          </pre>
                        </div>
                      </TabsContent>

                      <TabsContent value="execution">
                        <div className="terminal">
                          <div className="terminal-header">
                            <div className="terminal-dot red"></div>
                            <div className="terminal-dot yellow"></div>
                            <div className="terminal-dot green"></div>
                            <div className="ml-2 text-xs">Execution Results</div>
                          </div>
                          <div className="terminal-content h-80 overflow-y-auto">
                            {currentExploit.executed ? (
                              <>
                                <div className="terminal-prompt">$ python exploit.py</div>
                                <div className="whitespace-pre-wrap font-mono text-xs">
                                  {currentExploit.execution_result?.output || 'No output available'}
                                </div>
                                <div className="mt-2 text-xs text-status-online">
                                  [+] Execution completed in {currentExploit.execution_result?.execution_time_ms || 0}ms
                                </div>
                              </>
                            ) : (
                              <div className="flex flex-col items-center justify-center h-full">
                                <AlertTriangle className="w-8 h-8 text-status-warning mb-2" />
                                <p className="text-sm">Exploit has not been executed</p>
                                <Button variant="outline" size="sm" className="mt-4">
                                  <Play className="w-4 h-4 mr-1" />
                                  Execute (Simulation Only)
                                </Button>
                              </div>
                            )}
                          </div>
                        </div>
                      </TabsContent>
                    </Tabs>
                  </>
                ) : (
                  <div className="flex flex-col items-center justify-center h-80 bg-muted/20 rounded-md border">
                    <Code className="w-12 h-12 text-muted-foreground mb-4" />
                    <p className="text-muted-foreground">Select an exploit to view details</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* AI Attribution */}
          <div className="mt-6 p-3 border rounded-md bg-muted/10">
            <div className="flex items-center justify-between">
              <div className="text-xs text-muted-foreground">
                <span className="font-medium">Powered by:</span> Blackbox.ai Exploit Generator
              </div>
              <div className="text-xs">
                <Badge variant="outline" className="text-xs">
                  Simulation Environment
                </Badge>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      <LlamaAnalystChat exploitCode={currentExploit?.code} />
    </>
  );
}